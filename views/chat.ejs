<% layout('layouts/page') -%>
<% block('title', 'Chat Page') -%>

<h1>Chat Page</h1>

<smal>for authorize users</smal>

<h3>Hello, <%= user.get('username') %></h3>

<div id="room">
  <div id="connectionStatus"></div>
  <ul></ul>
  <form>
    <input type="text" name="msg" autocomplete="off" autofocus placeholder="Message">
  </form>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>

  var $form = $('#room form');
  var $unlist = $('#room ul');
  var $input = $('#room input');

  var socket = io.connect('', {
    reconnect: false
  });

  socket
    .on('message', function(message) {
      printMessage(message);
    })
    .on('connect', function() {
      printStatus('Connection established');
      $form.on('submit', sendMessage);
      $input.prop('disabled', false);
    })
    .on('disconnect', function() {
      printStatus('Connection lost');
      $form.off('submit', sendMessage);
      $input.prop('disabled', true);
      // setTimeout(reconnect, 500);
    })
    .on('reconnect_attempt', function(attempt) {
      if(attempt === 5) {
          printStatus('Oh, Nooo!!!');
      }
    });


  function sendMessage() {
    var text = $input.val();
    $input.val('');

    // Третий параметр опциональный - выполняется, когда данные пришли на сервер
    socket.emit('message', text, function(){
      printMessage(text);
    });

    return false;
  }

  function printMessage(message) {
    $('<li>', { text: message }).appendTo($unlist);
    return false;
  }

  function printStatus(status) {
    $('#connectionStatus').text(status);
    return false;
  }

  /* reconnect
    function reconnect() {
      socket.once('error', function() {
        setTimeout(reconnect, 500);
      });
      // socket.socket.connect('');  // socket.socket - внутренний слабодокументированный объект socket.io.
                                // Отвечает за поддержку соединения.
      return false;
    }
  */

</script>
